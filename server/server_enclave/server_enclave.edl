/*
 * Grupo de Teleinformatica e Automacao (GTA, Coppe, UFRJ)
 * Autor: Guilherme Araujo Thomaz
 * Data da ultima modificacao: 02/12/2021
 * Descricao: rotinas de borda para entradas e saidas do enclave
 * 
 * Este codigo foi modificado seguindo as permissoes da licenca
 * da Intel Corporation, apresentadas a seguir
 *
 */
/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"
    include "sgx_tcrypto.h"
    include "sgx_tseal.h"

    trusted {
        public sgx_status_t process_data([in,count=1] sgx_sealed_data_t* sealed_key,
                                         [in,size=encrypted_data_size] uint8_t* encrypted_data,
                                         uint32_t encrypted_data_size,
                                         [out,size=buffer_max_size] uint8_t* processed_result,
                                         uint32_t buffer_max_size,
                                         [out,count=1] uint32_t* processed_result_size);      
        public sgx_status_t retrieve_data([in,count=1] sgx_sealed_data_t* sealed_querier_key,
                                          [in,count=1] sgx_sealed_data_t* sealed_publisher_key,
                                          [in,size=encrypted_data_size] uint8_t* original_data,
                                          uint32_t encrypted_data_size,
                                          [in,size=9] char* querier_pk,
                                          [out,size=encrypted_data_size] uint8_t* result,
                                          [out,count=1] uint8_t* accepted);     
        public sgx_status_t sum_encrypted_data_s([in,count=encrypted_aggregation_msg_size] uint8_t* encrypted_aggregation_msg,
                                                 uint32_t encrypted_aggregation_msg_size,
                                                 [in,count=1] sgx_sealed_data_t* sealed_key,
                                                 [in,count=data_count] uint8_t** encrypted_data_array,
                                                 [in,count=data_count] uint32_t* encrypted_data_size_array,
                                                 uint32_t data_count,
                                                 [in,size=9] char* querier_pk,
                                                 uint32_t max_data_size,
                                                 [out,size=max_data_size] uint8_t* encrypted_result,
                                                 [out,count=1] uint32_t* encrypted_result_size);
        public sgx_status_t sealing_data([out,count=sealed_buffer_size]uint8_t* sealed_buffer,
                                      uint32_t sealed_buffer_size,
                                      [out,count=1] uint32_t* real_sealed_size,
                                      [in,count=data_size] uint8_t* data,
                                      uint32_t data_size);
    };
    untrusted { 
        void ocall_print_secret([in,size=secret_size] uint8_t* secret,
                                 uint32_t secret_size);
        void ocall_print_aggregated(unsigned long number);
    }; 
};

